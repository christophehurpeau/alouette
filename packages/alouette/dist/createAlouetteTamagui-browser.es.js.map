{"version":3,"file":"createAlouetteTamagui-browser.es.js","sources":["../src/config/animations.ts","../src/config/createAlouetteFonts.ts","../src/config/createAlouetteTokens.ts","../src/config/Breakpoints.ts","../src/config/media.ts","../src/config/themes.ts","../src/config/colorScales.ts","../src/createAlouetteTamagui.ts"],"sourcesContent":["import { createAnimations } from \"@tamagui/animations-react-native\";\n\nexport const animations = createAnimations({\n  fast: {\n    type: \"timing\",\n    duration: 100,\n    damping: 20,\n    stiffness: 250,\n  },\n  formElement: {\n    type: \"timing\",\n    duration: 600,\n    damping: 20,\n    stiffness: 250,\n  },\n});\n","import { createFont } from \"@tamagui/core\";\n\nconst defaultHeadingFontSizes = {\n  xl: 48,\n  lg: 40,\n  md: 32,\n  sm: 24,\n  xs: 18,\n};\nconst defaultBodyFontSizes = { xl: 24, lg: 18, md: 16, sm: 14, xs: 12 };\n\nconst roundWith1Precision = (value: number): number =>\n  Math.round(value * 10) / 10;\n\nexport interface AlouetteFontsOptions {\n  headingFontFamily?: string;\n  headingFontSizes?: typeof defaultHeadingFontSizes;\n  bodyFontFamily?: string;\n  bodyFontSizes?: typeof defaultBodyFontSizes;\n}\n\nexport const createAlouetteFonts = ({\n  headingFontFamily = \"Inter\",\n  headingFontSizes = defaultHeadingFontSizes,\n  bodyFontFamily = \"Inter\",\n  bodyFontSizes = defaultBodyFontSizes,\n}: AlouetteFontsOptions = {}) => ({\n  heading: createFont({\n    family: headingFontFamily,\n    weight: {\n      regular: \"400\",\n      bold: \"700\",\n      black: \"900\",\n    },\n    face: {\n      400: { normal: headingFontFamily + \"Regular\" },\n      700: { normal: headingFontFamily + \"Bold\" },\n      900: { normal: headingFontFamily + \"Black\" },\n    },\n    size: headingFontSizes,\n    lineHeight: {\n      xl: roundWith1Precision(1.1 * headingFontSizes.xl),\n      lg: roundWith1Precision(1.1 * headingFontSizes.lg),\n      md: roundWith1Precision(1.2 * headingFontSizes.md),\n      sm: roundWith1Precision(1.3 * headingFontSizes.sm),\n      xs: roundWith1Precision(1.3 * headingFontSizes.xs),\n    },\n  }),\n  body: createFont({\n    family: bodyFontFamily,\n    weight: {\n      regular: \"400\",\n      bold: \"700\",\n      black: \"900\",\n    },\n    face: {\n      400: { normal: bodyFontFamily + \"Regular\" },\n      700: { normal: bodyFontFamily + \"Bold\" },\n      900: { normal: bodyFontFamily + \"Black\" },\n    },\n    size: bodyFontSizes,\n    lineHeight: {\n      xl: roundWith1Precision(1.4 * bodyFontSizes.xl),\n      lg: roundWith1Precision(1.4 * bodyFontSizes.lg),\n      md: roundWith1Precision(1.4 * bodyFontSizes.md),\n      sm: roundWith1Precision(1.4 * bodyFontSizes.sm),\n      xs: roundWith1Precision(1.4 * bodyFontSizes.xs),\n    },\n  }),\n});\n","import { createTokens } from \"@tamagui/core\";\nimport type { IntRange } from \"type-fest\";\nimport type {\n  AlouetteColorScaleNames,\n  AlouetteColorScaleNumber,\n  AlouetteColorScales,\n} from \"./colorScales\";\n\ntype AlouetteSize = IntRange<0, 64>;\ntype NegativeAlouetteSize = `-${AlouetteSize}`;\ntype AlouetteSizeRecord = Record<AlouetteSize, number>;\ntype NegativeAlouetteSizeRecord = Record<NegativeAlouetteSize, number>;\n\nconst createAlouetteSizes = <N extends boolean>(\n  spacing: number,\n  negative: N,\n): N extends true ? AlouetteSizeRecord : NegativeAlouetteSizeRecord => {\n  const MAX_SIZE = 64;\n  const sizes = {} as Partial<\n    N extends true ? AlouetteSizeRecord : NegativeAlouetteSizeRecord\n  >;\n  for (let size = 0; size <= MAX_SIZE; size++) {\n    (sizes as any)[negative ? `-${size}` : `${size}`] = size * spacing;\n  }\n  return sizes as N extends true\n    ? AlouetteSizeRecord\n    : NegativeAlouetteSizeRecord;\n};\n\ntype ColorScaleTokens = {\n  [K in AlouetteColorScaleNames as `${K}.${AlouetteColorScaleNumber}`]: string; //(typeof colorScales)[K][AlouetteColorScaleNumber];\n};\n\nconst transformColorScalesToTokens = (\n  colorScales: AlouetteColorScales,\n): ColorScaleTokens => {\n  return Object.fromEntries(\n    Object.entries(colorScales).flatMap(([colorName, colorScale]) => {\n      return Object.entries(colorScale).map(([scaleNumber, colorValue]) => {\n        return [`${colorName}.${scaleNumber}`, colorValue];\n      });\n    }),\n  ) as ColorScaleTokens;\n};\n\nexport interface AlouetteTokensOptions {\n  spacing?: number;\n}\n\nexport const createAlouetteTokens = (\n  colorScales: AlouetteColorScales,\n  { spacing = 4 }: AlouetteTokensOptions = {},\n) => {\n  const sizes = createAlouetteSizes(spacing, false);\n  const negativeSizes = createAlouetteSizes(-spacing, true);\n\n  return createTokens({\n    color: {\n      black: \"#000000\",\n      white: \"#ffffff\",\n      disabled: colorScales.grayscale[3],\n      contrastDisabled: colorScales.grayscale[7],\n      ...transformColorScalesToTokens(colorScales),\n    },\n    radius: {\n      ...sizes,\n      xs: spacing * 2,\n      sm: spacing * 4,\n      md: spacing * 8,\n    },\n    space: {\n      ...sizes,\n      ...negativeSizes,\n      xs: spacing * 2,\n      sm: spacing * 4,\n      md: spacing * 8,\n    },\n    size: { ...sizes },\n    zIndex: {},\n  } as const);\n};\n","export const Breakpoints = {\n  /**\n   * min-width: 0\n   */\n  BASE: 0,\n  /**\n   * min-width: 480px\n   */\n  SMALL: 480,\n  /**\n   * min-width: 768px\n   */\n  MEDIUM: 768,\n  /**\n   * min-width: 1024px\n   */\n  LARGE: 1024,\n  /**\n   * min-width: 1280px\n   */\n  WIDE: 1280,\n} as const;\n\nexport type Breakpoint = (typeof Breakpoints)[keyof typeof Breakpoints];\nexport type BreakpointNames = \"base\" | \"large\" | \"medium\" | \"small\" | \"wide\";\n\nexport enum BreakpointNameEnum {\n  BASE = \"base\",\n  SMALL = \"small\",\n  MEDIUM = \"medium\",\n  LARGE = \"large\",\n  WIDE = \"wide\",\n}\n","import { createMedia } from \"@tamagui/react-native-media-driver\";\nimport { Breakpoints } from \"./Breakpoints\";\n\nexport const media = createMedia({\n  small: { minWidth: Breakpoints.SMALL },\n  medium: { minWidth: Breakpoints.MEDIUM },\n  large: { minWidth: Breakpoints.LARGE },\n  wide: { minWidth: Breakpoints.WIDE },\n} as const);\n","import type { Variable } from \"@tamagui/core\";\nimport { createAlouetteTokens } from \"./createAlouetteTokens\";\nimport { AlouetteColorScaleNames } from \"./colorScales\";\n\ninterface MinimalTheme {\n  backgroundColor: Variable;\n  textColor: Variable;\n}\n\nconst createTheme = <T extends MinimalTheme>(theme: T): T => {\n  return theme;\n};\n\nconst createColorTheme = (\n  tokens: ReturnType<typeof createAlouetteTokens>,\n  colorScaleName: AlouetteColorScaleNames,\n  textColor = tokens.color.black,\n  contrastTextColor = tokens.color.white,\n) => {\n  const getColor = (scaleNumber: number) =>\n    tokens.color[\n      (colorScaleName + `.${scaleNumber}`) as keyof typeof tokens.color\n    ];\n  return {\n    mainColor: getColor(6),\n    mainTextColor: getColor(9),\n    contrastTextColor,\n    borderColor: getColor(8),\n\n    \"interactive.contained.backgroundColor\": getColor(5),\n    \"interactive.borderColor\": getColor(8),\n\n    \"interactive.contained.backgroundColor:hover\": getColor(4),\n    \"interactive.outlined.backgroundColor:hover\": getColor(1),\n    \"interactive.borderColor:hover\": getColor(7),\n\n    \"interactive.contained.backgroundColor:focus\": getColor(4),\n    \"interactive.outlined.backgroundColor:focus\": getColor(1),\n    \"interactive.borderColor:focus\": getColor(7),\n\n    \"interactive.contained.backgroundColor:press\": getColor(2),\n    \"interactive.outlined.backgroundColor:press\": getColor(3),\n    \"interactive.borderColor:press\": getColor(7),\n\n    \"interactive.contained.backgroundColor:disabled\": tokens.color.disabled,\n    \"interactive.borderColor:disabled\": tokens.color.disabled,\n    \"interactive.textColor:disabled\": tokens.color.contrastDisabled,\n\n    \"interactive.forms.textColor\": textColor,\n    // \"interactive.forms.backgroundColor\": undefined,\n    // \"interactive.forms.backgroundColor:hover\": undefined,\n    \"interactive.forms.backgroundColor:focus\": getColor(1),\n    \"interactive.forms.backgroundColor:press\": getColor(3),\n    \"interactive.forms.borderColor\": getColor(10),\n    \"interactive.forms.borderColor:hover\": getColor(7),\n    \"interactive.forms.borderColor:focus\": getColor(7),\n    \"interactive.forms.borderColor:press\": getColor(7),\n    \"interactive.forms.borderColor:disabled\": tokens.color.disabled,\n  };\n};\n\nexport const createAlouetteThemes = (\n  tokens: ReturnType<typeof createAlouetteTokens>,\n) =>\n  ({\n    light: createTheme({\n      backgroundColor: tokens.color.white,\n      textColor: tokens.color.black,\n    }),\n    light_info: createColorTheme(tokens, \"info\"),\n    light_success: createColorTheme(tokens, \"success\"),\n    light_warning: createColorTheme(tokens, \"warning\"),\n    light_danger: createColorTheme(tokens, \"danger\"),\n    light_primary: createColorTheme(tokens, \"primary\"),\n\n    dark: createTheme({\n      backgroundColor: tokens.color.black,\n      textColor: tokens.color.white,\n    }),\n\n    dark_info: createColorTheme(\n      tokens,\n      \"info\",\n      tokens.color.black,\n      tokens.color.white,\n    ),\n    dark_success: createColorTheme(\n      tokens,\n      \"success\",\n      tokens.color.black,\n      tokens.color.white,\n    ),\n    dark_warning: createColorTheme(\n      tokens,\n      \"warning\",\n      tokens.color.black,\n      tokens.color.white,\n    ),\n    dark_danger: createColorTheme(\n      tokens,\n      \"danger\",\n      tokens.color.black,\n      tokens.color.white,\n    ),\n    dark_primary: createColorTheme(\n      tokens,\n      \"primary\",\n      tokens.color.black,\n      tokens.color.white,\n    ),\n  }) as const;\n","import type { IntRange } from \"type-fest\";\n\n// scale inspired by https://www.radix-ui.com/colors/docs/palette-composition/understanding-the-scale\n// 1: interactive outlined background hover/focus color\n// 2: interactive contained background press color\n// 3: interactive outlined background press color\n// 4: interactive contained background hover/focus color\n// 5: interactive contained background color\n// 6: main color\n// 7: border hover/focus color\n// 8: border color\n// 9: text color\n// 10: form border color (default)\n\nexport type AlouetteColorScaleNumber = IntRange<1, 10>;\n\nexport type AlouetteColorScale = { [K in AlouetteColorScaleNumber]: string };\n\nexport const createColorScale = <const T extends AlouetteColorScale>(\n  colorScale: T,\n): T => colorScale;\n\nexport type AlouetteColorScaleNames =\n  | \"grayscale\"\n  | \"success\"\n  | \"info\"\n  | \"warning\"\n  | \"danger\"\n  | \"primary\";\n\nexport type ColorScaleTokens = {\n  [K in AlouetteColorScaleNames as `${K}.${AlouetteColorScaleNumber}`]: string; //(typeof colorScales)[K][AlouetteColorScaleNumber];\n};\n\nexport type AlouetteColorScales = Record<\n  AlouetteColorScaleNames,\n  AlouetteColorScale\n>;\n\n// Tool: https://m2.material.io/inline-tools/color/\n\nexport const defaultColorScales: AlouetteColorScales = {\n  grayscale: createColorScale({\n    1: \"#faf9f8\",\n    2: \"#f4f3ef\",\n    3: \"#ebe9e5\",\n    4: \"#dedad2\",\n    5: \"#d1cdc5\",\n    6: \"#bab8ae\",\n    7: \"#aeaba3\",\n    8: \"#9c9a92\",\n    9: \"#8e8c83\",\n    10: \"#74726a\",\n  }),\n  success: createColorScale({\n    1: \"#f0f9f3\",\n    2: \"#d4f0d4\",\n    3: \"#a8e6a8\",\n    4: \"#7edc7e\",\n    5: \"#54d254\",\n    6: \"#2ac82a\",\n    7: \"#00be00\",\n    8: \"#00b400\",\n    9: \"#00aa00\",\n    10: \"#009200\",\n  }),\n  info: createColorScale({\n    1: \"#f0f9ff\",\n    2: \"#d4f0ff\",\n    3: \"#a8e6ff\",\n    4: \"#7edcff\",\n    5: \"#54d2ff\",\n    6: \"#2ac8ff\",\n    7: \"#00beff\",\n    8: \"#00b4ff\",\n    9: \"#00aaff\",\n    10: \"#0092ff\",\n  }),\n  warning: createColorScale({\n    1: \"#fff9f0\",\n    2: \"#fff0d4\",\n    3: \"#ffe6a8\",\n    4: \"#ffdc7e\",\n    5: \"#ffd254\",\n    6: \"#ffc82a\",\n    7: \"#ffbe00\",\n    8: \"#ffb400\",\n    9: \"#ffaa00\",\n    10: \"#ff9200\",\n  }),\n  danger: createColorScale({\n    1: \"#fff0f0\",\n    2: \"#ffd4d4\",\n    3: \"#ffaaaa\",\n    4: \"#ff7e7e\",\n    5: \"#ff5454\",\n    6: \"#ff2a2a\",\n    7: \"#ff0000\",\n    8: \"#f40000\",\n    9: \"#ea0000\",\n    10: \"#d20000\",\n  }),\n  primary: createColorScale({\n    1: \"#e1f4f6\",\n    2: \"#b4e2e9\",\n    3: \"#86cfdc\",\n    4: \"#60bcd0\",\n    5: \"#46aeca\",\n    6: \"#31a1c4\",\n    7: \"#2994b7\",\n    8: \"#1e82a6\",\n    9: \"#1c7193\",\n    10: \"#125272\",\n  }),\n} as const;\n","import { createTamagui } from \"@tamagui/core\";\nimport { animations } from \"./config/animations\";\nimport type { AlouetteColorScales } from \"./config/colorScales\";\nimport type { AlouetteFontsOptions } from \"./config/createAlouetteFonts\";\nimport { createAlouetteFonts } from \"./config/createAlouetteFonts\";\nimport type { AlouetteTokensOptions } from \"./config/createAlouetteTokens\";\nimport { createAlouetteTokens } from \"./config/createAlouetteTokens\";\nimport { media } from \"./config/media\";\nimport { createAlouetteThemes } from \"./config/themes\";\n\nexport interface AlouetteTamaguiOptions {\n  colorScales: AlouetteColorScales;\n  fonts?: AlouetteFontsOptions;\n  tokens?: AlouetteTokensOptions;\n}\n\nexport {\n  defaultColorScales,\n  createColorScale,\n  type AlouetteColorScales,\n} from \"./config/colorScales\";\n\nexport const createAlouetteTamagui = (options: AlouetteTamaguiOptions) => {\n  const tokens = createAlouetteTokens(options.colorScales, options.tokens);\n  return createTamagui({\n    fonts: createAlouetteFonts(options.fonts),\n    tokens,\n    themes: createAlouetteThemes(tokens),\n    media,\n    animations,\n    settings: {\n      allowedStyleValues: \"strict\",\n      autocompleteSpecificTokens: true,\n    },\n    components: [\"alouette\"],\n  } as const);\n};\n"],"names":[],"mappings":"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"}